# üöÄ Script de D√©ploiement PowerShell - Terrains Synth√©tiques Dakar
# Usage: .\deploy.ps1 [production|staging]

param(
    [string]$Environment = "production"
)

# Configuration
$ProjectName = "terrains-synthetiques"
$Domain = "votre-domaine.com"

# Couleurs pour les messages
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"

Write-Host "üöÄ D√©ploiement Terrains Synth√©tiques Dakar" -ForegroundColor $Blue
Write-Host "Environnement: $Environment" -ForegroundColor $Blue
Write-Host ""

# Fonction pour afficher les messages
function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor $Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor $Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor $Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor $Red
}

# V√©rifier les pr√©requis
function Check-Prerequisites {
    Write-Info "V√©rification des pr√©requis..."
    
    # V√©rifier Node.js
    if (!(Get-Command node -ErrorAction SilentlyContinue)) {
        Write-Error "Node.js n'est pas install√©"
        Write-Host "T√©l√©chargez depuis: https://nodejs.org/" -ForegroundColor $Yellow
        exit 1
    }
    
    # V√©rifier npm
    if (!(Get-Command npm -ErrorAction SilentlyContinue)) {
        Write-Error "npm n'est pas install√©"
        exit 1
    }
    
    # V√©rifier PHP
    if (!(Get-Command php -ErrorAction SilentlyContinue)) {
        Write-Error "PHP n'est pas install√©"
        Write-Host "Installez XAMPP ou PHP standalone" -ForegroundColor $Yellow
        exit 1
    }
    
    # V√©rifier Composer
    if (!(Get-Command composer -ErrorAction SilentlyContinue)) {
        Write-Error "Composer n'est pas install√©"
        Write-Host "T√©l√©chargez depuis: https://getcomposer.org/" -ForegroundColor $Yellow
        exit 1
    }
    
    Write-Success "Tous les pr√©requis sont install√©s"
}

# Nettoyer le projet
function Clean-Project {
    Write-Info "Nettoyage du projet..."
    
    # Supprimer les dossiers de d√©veloppement
    $foldersToRemove = @(
        "node_modules",
        "Backend/vendor",
        "Frontend/node_modules",
        "Frontend/dist"
    )
    
    foreach ($folder in $foldersToRemove) {
        if (Test-Path $folder) {
            Remove-Item -Recurse -Force $folder -ErrorAction SilentlyContinue
            Write-Host "Supprim√©: $folder" -ForegroundColor $Yellow
        }
    }
    
    # Nettoyer les caches Laravel
    $cacheFolders = @(
        "Backend/storage/framework/cache/*",
        "Backend/storage/framework/sessions/*",
        "Backend/storage/framework/views/*"
    )
    
    foreach ($folder in $cacheFolders) {
        if (Test-Path $folder) {
            Remove-Item -Recurse -Force $folder -ErrorAction SilentlyContinue
        }
    }
    
    Write-Success "Projet nettoy√©"
}

# Installer les d√©pendances Backend
function Install-BackendDependencies {
    Write-Info "Installation des d√©pendances Backend..."
    
    Set-Location Backend
    
    # Installer Composer
    composer install --no-dev --optimize-autoloader --no-interaction
    
    # Copier le fichier d'environnement
    if (!(Test-Path .env)) {
        Copy-Item .env.example .env
        Write-Warning "Fichier .env cr√©√© √† partir de .env.example"
    }
    
    # G√©n√©rer la cl√© d'application si n√©cessaire
    $envContent = Get-Content .env -Raw
    if ($envContent -notmatch "APP_KEY=base64:") {
        php artisan key:generate
        Write-Success "Cl√© d'application g√©n√©r√©e"
    }
    
    Set-Location ..
    Write-Success "D√©pendances Backend install√©es"
}

# Installer les d√©pendances Frontend
function Install-FrontendDependencies {
    Write-Info "Installation des d√©pendances Frontend..."
    
    Set-Location Frontend
    
    # Installer npm
    npm install --silent
    
    # Build pour la production
    npm run build
    
    Set-Location ..
    Write-Success "D√©pendances Frontend install√©es et build termin√©"
}

# Configurer la base de donn√©es
function Setup-Database {
    Write-Info "Configuration de la base de donn√©es..."
    
    Set-Location Backend
    
    # Ex√©cuter les migrations
    php artisan migrate --force
    
    # Ex√©cuter les seeders
    php artisan db:seed --force
    
    Set-Location ..
    Write-Success "Base de donn√©es configur√©e"
}

# Optimiser pour la production
function Optimize-ForProduction {
    Write-Info "Optimisation pour la production..."
    
    Set-Location Backend
    
    # Cache des configurations
    php artisan config:cache
    
    # Cache des routes
    php artisan route:cache
    
    # Cache des vues
    php artisan view:cache
    
    Set-Location ..
    Write-Success "Application optimis√©e pour la production"
}

# Configurer les permissions
function Set-Permissions {
    Write-Info "Configuration des permissions..."
    
    # Permissions pour Laravel (Windows)
    $folders = @(
        "Backend/storage",
        "Backend/bootstrap/cache"
    )
    
    foreach ($folder in $folders) {
        if (Test-Path $folder) {
            # Donner les permissions d'√©criture
            icacls $folder /grant "Everyone":(OI)(CI)F /T
        }
    }
    
    Write-Success "Permissions configur√©es"
}

# Cr√©er les fichiers de configuration serveur
function Create-ServerConfigs {
    Write-Info "Cr√©ation des configurations serveur..."
    
    # Configuration Apache (.htaccess)
    $htaccessContent = @"
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
"@

    Set-Content -Path "Backend/public/.htaccess" -Value $htaccessContent
    
    # Configuration IIS (web.config)
    $webConfigContent = @"
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <system.webServer>
        <rewrite>
            <rules>
                <rule name="Imported Rule 1" stopProcessing="true">
                    <match url="^(.*)/$" ignoreCase="false" />
                    <conditions>
                        <add input="{REQUEST_FILENAME}" ignoreCase="false" negate="true" />
                    </conditions>
                    <action type="Redirect" redirectType="Permanent" url="/{R:1}" />
                </rule>
                <rule name="Imported Rule 2" stopProcessing="true">
                    <match url="^" ignoreCase="false" />
                    <conditions>
                        <add input="{REQUEST_FILENAME}" ignoreCase="false" negate="true" />
                        <add input="{REQUEST_URI}" pattern="^(.*)/$" ignoreCase="false" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="index.php/{R:0}" />
                </rule>
            </rules>
        </rewrite>
    </system.webServer>
</configuration>
"@

    Set-Content -Path "Backend/public/web.config" -Value $webConfigContent
    
    Write-Success "Configurations serveur cr√©√©es"
}

# Cr√©er le script de sauvegarde
function Create-BackupScript {
    Write-Info "Cr√©ation du script de sauvegarde..."
    
    $backupScript = @"
# Script de sauvegarde - Terrains Synth√©tiques Dakar
`$backupDir = "C:\backups\terrains-synthetiques"
`$date = Get-Date -Format "yyyyMMdd_HHmmss"

# Cr√©er le r√©pertoire de sauvegarde
New-Item -ItemType Directory -Force -Path `$backupDir

# Sauvegarde de la base de donn√©es
mysqldump -u root -p terrains_synthetiques > "`$backupDir\db_backup_`$date.sql"

# Sauvegarde des fichiers
Compress-Archive -Path "C:\xampp\htdocs\terrains-synthetiques" -DestinationPath "`$backupDir\files_backup_`$date.zip" -Force

# Nettoyer les anciennes sauvegardes (garder 7 jours)
Get-ChildItem `$backupDir -Name "*.sql" | Where-Object { (Get-Item `$_).LastWriteTime -lt (Get-Date).AddDays(-7) } | Remove-Item
Get-ChildItem `$backupDir -Name "*.zip" | Where-Object { (Get-Item `$_).LastWriteTime -lt (Get-Date).AddDays(-7) } | Remove-Item

Write-Host "Sauvegarde termin√©e: `$date"
"@

    Set-Content -Path "backup.ps1" -Value $backupScript
    Write-Success "Script de sauvegarde cr√©√©"
}

# Cr√©er le script de monitoring
function Create-MonitoringScript {
    Write-Info "Cr√©ation du script de monitoring..."
    
    $monitorScript = @"
# Script de monitoring - Terrains Synth√©tiques Dakar

Write-Host "=== MONITORING TERRAINS SYNTH√âTIQUES ==="
Write-Host "Date: `$(Get-Date)"
Write-Host ""

# V√©rifier les services
Write-Host "=== SERVICES ==="
Get-Service -Name "Apache*", "MySQL*" | Select-Object Name, Status

Write-Host ""
Write-Host "=== ESPACE DISQUE ==="
Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, @{Name="Size(GB)";Expression={[math]::Round(`$_.Size/1GB,2)}}, @{Name="FreeSpace(GB)";Expression={[math]::Round(`$_.FreeSpace/1GB,2)}}

Write-Host ""
Write-Host "=== M√âMOIRE ==="
Get-WmiObject -Class Win32_OperatingSystem | Select-Object @{Name="TotalMemory(GB)";Expression={[math]::Round(`$_.TotalVisibleMemorySize/1MB,2)}}, @{Name="FreeMemory(GB)";Expression={[math]::Round(`$_.FreePhysicalMemory/1MB,2)}}

Write-Host ""
Write-Host "=== LOGS R√âCENTS ==="
if (Test-Path "C:\xampp\apache\logs\error.log") {
    Get-Content "C:\xampp\apache\logs\error.log" -Tail 5
}
"@

    Set-Content -Path "monitor.ps1" -Value $monitorScript
    Write-Success "Script de monitoring cr√©√©"
}

# Cr√©er le fichier README de d√©ploiement
function Create-DeploymentReadme {
    Write-Info "Cr√©ation du README de d√©ploiement..."
    
    $readmeContent = @"
# üöÄ Guide de D√©ploiement Windows - Terrains Synth√©tiques Dakar

## Configuration Post-D√©ploiement

### 1. Variables d'Environnement
√âditer le fichier `Backend/.env` :
```env
APP_NAME="Terrains Synth√©tiques Dakar"
APP_ENV=production
APP_DEBUG=false
APP_URL=http://localhost

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=terrains_synthetiques
DB_USERNAME=your_db_user
DB_PASSWORD=your_db_password

MAPBOX_TOKEN=your_mapbox_token
```

### 2. Configuration XAMPP
- D√©marrer Apache et MySQL dans XAMPP Control Panel
- Acc√©der √† http://localhost/phpmyadmin
- Cr√©er la base de donn√©es `terrains_synthetiques`

### 3. Configuration IIS (optionnel)
- Installer IIS sur Windows Server
- Configurer le site web
- Pointer vers le dossier du projet

### 4. Sauvegardes
Le script `backup.ps1` est configur√© pour :
- Sauvegarder la base de donn√©es quotidiennement
- Sauvegarder les fichiers
- Nettoyer les anciennes sauvegardes (7 jours)

### 5. Monitoring
Utiliser `monitor.ps1` pour v√©rifier :
- Statut des services
- Utilisation des ressources
- Logs d'erreur

## Commandes Utiles

```powershell
# Red√©marrer les services
Restart-Service Apache*
Restart-Service MySQL*

# Voir les logs
Get-Content "C:\xampp\apache\logs\access.log" -Tail 50
Get-Content "C:\xampp\apache\logs\error.log" -Tail 50
Get-Content "Backend\storage\logs\laravel.log" -Tail 50

# Mise √† jour
git pull
.\deploy.ps1 production

# Sauvegarde manuelle
.\backup.ps1

# Monitoring
.\monitor.ps1
```

## Support
- Logs : `C:\xampp\apache\logs\` et `Backend\storage\logs\`
- Configuration : `Backend\.env`
- Base de donn√©es : MySQL sur localhost:3306
"@

    Set-Content -Path "DEPLOYMENT_README.md" -Value $readmeContent
    Write-Success "README de d√©ploiement cr√©√©"
}

# Fonction principale
function Main {
    Write-Host "=== D√âPLOIEMENT TERRAINS SYNTH√âTIQUES DAKAR ===" -ForegroundColor $Blue
    Write-Host ""
    
    # V√©rifier les pr√©requis
    Check-Prerequisites
    
    # Nettoyer le projet
    Clean-Project
    
    # Installer les d√©pendances
    Install-BackendDependencies
    Install-FrontendDependencies
    
    # Configurer la base de donn√©es
    Setup-Database
    
    # Optimiser pour la production
    Optimize-ForProduction
    
    # Configurer les permissions
    Set-Permissions
    
    # Cr√©er les configurations
    Create-ServerConfigs
    Create-BackupScript
    Create-MonitoringScript
    Create-DeploymentReadme
    
    Write-Host ""
    Write-Host "‚úÖ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !" -ForegroundColor $Green
    Write-Host ""
    Write-Host "Prochaines √©tapes :" -ForegroundColor $Blue
    Write-Host "1. Configurer le fichier Backend/.env"
    Write-Host "2. D√©marrer XAMPP (Apache + MySQL)"
    Write-Host "3. Configurer les sauvegardes automatiques"
    Write-Host "4. Tester toutes les fonctionnalit√©s"
    Write-Host ""
    Write-Host "Fichiers cr√©√©s :" -ForegroundColor $Yellow
    Write-Host "- .htaccess (configuration Apache)"
    Write-Host "- web.config (configuration IIS)"
    Write-Host "- backup.ps1 (sauvegardes automatiques)"
    Write-Host "- monitor.ps1 (monitoring)"
    Write-Host "- DEPLOYMENT_README.md (guide complet)"
    Write-Host ""
    Write-Host "üéâ Votre application est pr√™te pour la production !" -ForegroundColor $Green
}

# Ex√©cuter le script
Main 