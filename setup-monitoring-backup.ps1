# Script de configuration du monitoring et des sauvegardes
# Usage: .\setup-monitoring-backup.ps1

param(
    [string]$AppUrl = "http://127.0.0.1:8000",
    [string]$BackupPath = "C:\backups\laravel",
    [string]$LogPath = "C:\logs\laravel"
)

Write-Host "üìä Configuration du monitoring et des sauvegardes" -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor Green

# 1. Cr√©ation des dossiers n√©cessaires
Write-Host "üìÅ Cr√©ation des dossiers..." -ForegroundColor Yellow

$Folders = @($BackupPath, $LogPath, "C:\monitoring", "C:\ssl")

foreach ($folder in $Folders) {
    if (!(Test-Path $folder)) {
        New-Item -ItemType Directory -Path $folder -Force
        Write-Host "‚úÖ Dossier cr√©√©: $folder" -ForegroundColor Green
    } else {
        Write-Host "‚úÖ Dossier existe: $folder" -ForegroundColor Green
    }
}

# 2. Script de monitoring de sant√©
Write-Host "üìä Configuration du monitoring de sant√©..." -ForegroundColor Yellow

$HealthCheckScript = @"
# Script de v√©rification de sant√©
# Usage: .\health-check.ps1

param(
    [string]`$AppUrl = "$AppUrl",
    [string]`$LogFile = "$LogPath\health.log"
)

`$Date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

# Cr√©er le dossier de logs si n√©cessaire
if (!(Test-Path (Split-Path `$LogFile))) {
    New-Item -ItemType Directory -Path (Split-Path `$LogFile) -Force
}

Write-Host "üîç V√©rification de sant√©: `$Date" -ForegroundColor Yellow

# 1. V√©rifier l'application
try {
    `$response = Invoke-WebRequest -Uri `$AppUrl -UseBasicParsing -TimeoutSec 30
    if (`$response.StatusCode -eq 200) {
        `$status = "‚úÖ Application OK"
        Write-Host `$status -ForegroundColor Green
    } else {
        `$status = "‚ùå Application ERREUR - HTTP `$(`$response.StatusCode)"
        Write-Host `$status -ForegroundColor Red
    }
} catch {
    `$status = "‚ùå Application INACCESSIBLE - `$(`$_.Exception.Message)"
    Write-Host `$status -ForegroundColor Red
}

# 2. V√©rifier l'API
try {
    `$apiResponse = Invoke-WebRequest -Uri "`$AppUrl/api/status" -UseBasicParsing -TimeoutSec 30
    if (`$apiResponse.StatusCode -eq 200) {
        `$apiStatus = "‚úÖ API OK"
        Write-Host `$apiStatus -ForegroundColor Green
    } else {
        `$apiStatus = "‚ùå API ERREUR - HTTP `$(`$apiResponse.StatusCode)"
        Write-Host `$apiStatus -ForegroundColor Red
    }
} catch {
    `$apiStatus = "‚ùå API INACCESSIBLE - `$(`$_.Exception.Message)"
    Write-Host `$apiStatus -ForegroundColor Red
}

# 3. V√©rifier l'espace disque
`$disk = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'"
`$diskUsage = [math]::Round((`$disk.Size - `$disk.FreeSpace) / `$disk.Size * 100, 2)
if (`$diskUsage -gt 80) {
    `$diskStatus = "‚ö†Ô∏è Espace disque critique: `$diskUsage%"
    Write-Host `$diskStatus -ForegroundColor Yellow
} else {
    `$diskStatus = "‚úÖ Espace disque OK: `$diskUsage%"
    Write-Host `$diskStatus -ForegroundColor Green
}

# 4. V√©rifier la m√©moire
`$memory = Get-WmiObject -Class Win32_OperatingSystem
`$memoryUsage = [math]::Round((`$memory.TotalVisibleMemorySize - `$memory.FreePhysicalMemory) / `$memory.TotalVisibleMemorySize * 100, 2)
if (`$memoryUsage -gt 80) {
    `$memoryStatus = "‚ö†Ô∏è M√©moire critique: `$memoryUsage%"
    Write-Host `$memoryStatus -ForegroundColor Yellow
} else {
    `$memoryStatus = "‚úÖ M√©moire OK: `$memoryUsage%"
    Write-Host `$memoryStatus -ForegroundColor Green
}

# 5. V√©rifier les services
`$services = @("apache2.4", "w3svc", "postgresql-x64-15")
foreach (`$service in `$services) {
    try {
        `$serviceStatus = Get-Service -Name `$service -ErrorAction SilentlyContinue
        if (`$serviceStatus -and `$serviceStatus.Status -eq "Running") {
            Write-Host "‚úÖ Service `$service OK" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Service `$service ARR√äT√â" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ö†Ô∏è Service `$service non trouv√©" -ForegroundColor Yellow
    }
}

# 6. Enregistrer dans le log
`$logEntry = "`$Date | `$status | `$apiStatus | `$diskStatus | `$memoryStatus"
Add-Content -Path `$LogFile -Value `$logEntry

# 7. Envoyer une alerte si n√©cessaire
if (`$status -like "*ERREUR*" -or `$status -like "*INACCESSIBLE*") {
    Write-Host "üö® ALERTE: Application en difficult√©!" -ForegroundColor Red
    # Ici vous pouvez ajouter l'envoi d'email ou notification
}
"@

$HealthCheckPath = "C:\monitoring\health-check.ps1"
$HealthCheckScript | Out-File -FilePath $HealthCheckPath -Encoding UTF8
Write-Host "‚úÖ Script de monitoring cr√©√©: $HealthCheckPath" -ForegroundColor Green

# 3. Script de sauvegarde
Write-Host "üíæ Configuration des sauvegardes..." -ForegroundColor Yellow

$BackupScript = @"
# Script de sauvegarde compl√®te
# Usage: .\backup-complete.ps1

param(
    [string]`$BackupPath = "$BackupPath",
    [string]`$AppDir = "C:\laragon\www\Terrains-Synthetiques",
    [int]`$RetentionDays = 30
)

`$Date = Get-Date -Format "yyyyMMdd_HHmmss"
`$BackupDir = "`$BackupPath\`$Date"

Write-Host "üîÑ D√©but de la sauvegarde: `$(Get-Date)" -ForegroundColor Yellow

# Cr√©er le dossier de sauvegarde
if (!(Test-Path `$BackupDir)) {
    New-Item -ItemType Directory -Path `$BackupDir -Force
}

# 1. Sauvegarde de la base de donn√©es
Write-Host "üìä Sauvegarde de la base de donn√©es..." -ForegroundColor Cyan
try {
    pg_dump -U kalel_user -h localhost kalel_sa_match > "`$BackupDir\db_backup.sql"
    Write-Host "‚úÖ Sauvegarde DB termin√©e" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur sauvegarde DB: `$(`$_.Exception.Message)" -ForegroundColor Red
}

# 2. Sauvegarde des fichiers Backend
Write-Host "üìÅ Sauvegarde des fichiers Backend..." -ForegroundColor Cyan
try {
    Compress-Archive -Path "`$AppDir\Backend\*" -DestinationPath "`$BackupDir\backend_backup.zip" -Force
    Write-Host "‚úÖ Sauvegarde Backend termin√©e" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur sauvegarde Backend: `$(`$_.Exception.Message)" -ForegroundColor Red
}

# 3. Sauvegarde des fichiers Frontend
Write-Host "üìÅ Sauvegarde des fichiers Frontend..." -ForegroundColor Cyan
try {
    Compress-Archive -Path "`$AppDir\Frontend\*" -DestinationPath "`$BackupDir\frontend_backup.zip" -Force
    Write-Host "‚úÖ Sauvegarde Frontend termin√©e" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur sauvegarde Frontend: `$(`$_.Exception.Message)" -ForegroundColor Red
}

# 4. Sauvegarde de la configuration
Write-Host "‚öôÔ∏è Sauvegarde de la configuration..." -ForegroundColor Cyan
try {
    Copy-Item "`$AppDir\Backend\.env" "`$BackupDir\env_backup" -Force
    Write-Host "‚úÖ Sauvegarde configuration termin√©e" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur sauvegarde configuration: `$(`$_.Exception.Message)" -ForegroundColor Red
}

# 5. Cr√©er un fichier de m√©tadonn√©es
`$BackupInfo = @"
Date: `$(Get-Date)
Application: `$AppDir
Base de donn√©es: kalel_sa_match
Taille DB: `$((Get-Item "`$BackupDir\db_backup.sql" -ErrorAction SilentlyContinue).Length / 1KB) KB
Taille Backend: `$((Get-Item "`$BackupDir\backend_backup.zip" -ErrorAction SilentlyContinue).Length / 1MB) MB
Taille Frontend: `$((Get-Item "`$BackupDir\frontend_backup.zip" -ErrorAction SilentlyContinue).Length / 1MB) MB
"@

`$BackupInfo | Out-File -FilePath "`$BackupDir\backup_info.txt" -Encoding UTF8

# 6. Nettoyer les anciennes sauvegardes
Write-Host "üßπ Nettoyage des anciennes sauvegardes..." -ForegroundColor Cyan
try {
    Get-ChildItem -Path `$BackupPath -Directory | Where-Object { `$_.CreationTime -lt (Get-Date).AddDays(-`$RetentionDays) } | Remove-Item -Recurse -Force
    Write-Host "‚úÖ Nettoyage termin√©" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Erreur lors du nettoyage: `$(`$_.Exception.Message)" -ForegroundColor Yellow
}

# 7. Compresser tout en un seul fichier
Write-Host "üì¶ Cr√©ation de l'archive finale..." -ForegroundColor Cyan
try {
    Compress-Archive -Path "`$BackupDir\*" -DestinationPath "`$BackupPath\complete_backup_`$Date.zip" -Force
    Remove-Item -Path `$BackupDir -Recurse -Force
    Write-Host "‚úÖ Archive finale cr√©√©e: `$BackupPath\complete_backup_`$Date.zip" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur cr√©ation archive: `$(`$_.Exception.Message)" -ForegroundColor Red
}

Write-Host "‚úÖ Sauvegarde termin√©e: `$(Get-Date)" -ForegroundColor Green
"@

$BackupScriptPath = "C:\monitoring\backup-complete.ps1"
$BackupScript | Out-File -FilePath $BackupScriptPath -Encoding UTF8
Write-Host "‚úÖ Script de sauvegarde cr√©√©: $BackupScriptPath" -ForegroundColor Green

# 4. Script de restauration
Write-Host "üîÑ Configuration du script de restauration..." -ForegroundColor Yellow

$RestoreScript = @"
# Script de restauration
# Usage: .\restore-backup.ps1 <backup_file.zip>

param(
    [Parameter(Mandatory=`$true)]
    [string]`$BackupFile,
    
    [string]`$AppDir = "C:\laragon\www\Terrains-Synthetiques",
    [string]`$BackupPath = "$BackupPath"
)

if (!(Test-Path `$BackupFile)) {
    Write-Host "‚ùå Fichier de sauvegarde non trouv√©: `$BackupFile" -ForegroundColor Red
    exit 1
}

Write-Host "üîÑ D√©but de la restauration: `$(Get-Date)" -ForegroundColor Yellow

# Cr√©er un dossier temporaire pour l'extraction
`$TempDir = "`$BackupPath\temp_restore_`$(Get-Date -Format 'yyyyMMdd_HHmmss')"
New-Item -ItemType Directory -Path `$TempDir -Force

try {
    # 1. Extraire l'archive
    Write-Host "üì¶ Extraction de l'archive..." -ForegroundColor Cyan
    Expand-Archive -Path `$BackupFile -DestinationPath `$TempDir -Force
    
    # 2. Restaurer la base de donn√©es
    Write-Host "üìä Restauration de la base de donn√©es..." -ForegroundColor Cyan
    if (Test-Path "`$TempDir\db_backup.sql") {
        psql -U kalel_user -h localhost kalel_sa_match < "`$TempDir\db_backup.sql"
        Write-Host "‚úÖ Base de donn√©es restaur√©e" -ForegroundColor Green
    }
    
    # 3. Restaurer les fichiers Backend
    Write-Host "üìÅ Restauration des fichiers Backend..." -ForegroundColor Cyan
    if (Test-Path "`$TempDir\backend_backup.zip") {
        Expand-Archive -Path "`$TempDir\backend_backup.zip" -DestinationPath "`$AppDir\Backend" -Force
        Write-Host "‚úÖ Backend restaur√©" -ForegroundColor Green
    }
    
    # 4. Restaurer les fichiers Frontend
    Write-Host "üìÅ Restauration des fichiers Frontend..." -ForegroundColor Cyan
    if (Test-Path "`$TempDir\frontend_backup.zip") {
        Expand-Archive -Path "`$TempDir\frontend_backup.zip" -DestinationPath "`$AppDir\Frontend" -Force
        Write-Host "‚úÖ Frontend restaur√©" -ForegroundColor Green
    }
    
    # 5. Restaurer la configuration
    Write-Host "‚öôÔ∏è Restauration de la configuration..." -ForegroundColor Cyan
    if (Test-Path "`$TempDir\env_backup") {
        Copy-Item "`$TempDir\env_backup" "`$AppDir\Backend\.env" -Force
        Write-Host "‚úÖ Configuration restaur√©e" -ForegroundColor Green
    }
    
    # 6. Nettoyer les caches Laravel
    Write-Host "üßπ Nettoyage des caches..." -ForegroundColor Cyan
    Set-Location "`$AppDir\Backend"
    php artisan config:clear
    php artisan cache:clear
    php artisan route:clear
    php artisan view:clear
    
    Write-Host "‚úÖ Restauration termin√©e: `$(Get-Date)" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå Erreur lors de la restauration: `$(`$_.Exception.Message)" -ForegroundColor Red
} finally {
    # Nettoyer le dossier temporaire
    if (Test-Path `$TempDir) {
        Remove-Item -Path `$TempDir -Recurse -Force
    }
}
"@

$RestoreScriptPath = "C:\monitoring\restore-backup.ps1"
$RestoreScript | Out-File -FilePath $RestoreScriptPath -Encoding UTF8
Write-Host "‚úÖ Script de restauration cr√©√©: $RestoreScriptPath" -ForegroundColor Green

# 5. Configuration des t√¢ches planifi√©es
Write-Host "üìÖ Configuration des t√¢ches planifi√©es..." -ForegroundColor Yellow

try {
    # T√¢che de monitoring (toutes les 5 minutes)
    $HealthAction = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-File `"$HealthCheckPath`""
    $HealthTrigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 5) -RepetitionDuration (New-TimeSpan -Days 365)
    $HealthPrincipal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
    $HealthSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries

    Register-ScheduledTask -TaskName "Laravel Health Check" -Action $HealthAction -Trigger $HealthTrigger -Principal $HealthPrincipal -Settings $HealthSettings -Description "V√©rification de sant√© de l'application Laravel"

    # T√¢che de sauvegarde (quotidienne √† 2h du matin)
    $BackupAction = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-File `"$BackupScriptPath`""
    $BackupTrigger = New-ScheduledTaskTrigger -Daily -At 2am
    $BackupPrincipal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
    $BackupSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries

    Register-ScheduledTask -TaskName "Laravel Backup" -Action $BackupAction -Trigger $BackupTrigger -Principal $BackupPrincipal -Settings $BackupSettings -Description "Sauvegarde quotidienne de l'application Laravel"

    Write-Host "‚úÖ T√¢ches planifi√©es cr√©√©es" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Impossible de cr√©er les t√¢ches planifi√©es: $($_.Exception.Message)" -ForegroundColor Yellow
}

# 6. Test des scripts
Write-Host "üß™ Test des scripts..." -ForegroundColor Yellow

# Test du monitoring
Write-Host "üìä Test du monitoring..." -ForegroundColor Cyan
try {
    & $HealthCheckPath
    Write-Host "‚úÖ Test du monitoring r√©ussi" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors du test du monitoring: $($_.Exception.Message)" -ForegroundColor Red
}

# Test de la sauvegarde
Write-Host "üíæ Test de la sauvegarde..." -ForegroundColor Cyan
try {
    & $BackupScriptPath
    Write-Host "‚úÖ Test de la sauvegarde r√©ussi" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors du test de la sauvegarde: $($_.Exception.Message)" -ForegroundColor Red
}

# R√©sum√© final
Write-Host ""
Write-Host "üéâ CONFIGURATION TERMIN√âE !" -ForegroundColor Green
Write-Host "=============================" -ForegroundColor Green
Write-Host "‚úÖ Monitoring configur√©" -ForegroundColor Green
Write-Host "‚úÖ Sauvegardes configur√©es" -ForegroundColor Green
Write-Host "‚úÖ T√¢ches planifi√©es cr√©√©es" -ForegroundColor Green
Write-Host "‚úÖ Scripts de test cr√©√©s" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Commandes utiles:" -ForegroundColor Yellow
Write-Host "‚Ä¢ Monitoring: .\health-check.ps1" -ForegroundColor Cyan
Write-Host "‚Ä¢ Sauvegarde: .\backup-complete.ps1" -ForegroundColor Cyan
Write-Host "‚Ä¢ Restauration: .\restore-backup.ps1 <fichier.zip>" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìÅ Dossiers cr√©√©s:" -ForegroundColor Yellow
Write-Host "‚Ä¢ Monitoring: C:\monitoring\" -ForegroundColor Cyan
Write-Host "‚Ä¢ Sauvegardes: $BackupPath" -ForegroundColor Cyan
Write-Host "‚Ä¢ Logs: $LogPath" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìö Documentation: DEPLOIEMENT_PRODUCTION_COMPLET.md" -ForegroundColor Green 