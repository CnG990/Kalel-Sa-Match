#!/bin/bash

# ðŸš€ Script de DÃ©ploiement - Terrains SynthÃ©tiques Dakar
# Usage: ./deploy.sh [production|staging]

set -e  # ArrÃªter en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
ENVIRONMENT=${1:-production}
PROJECT_NAME="terrains-synthetiques"
DOMAIN="votre-domaine.com"

echo -e "${BLUE}ðŸš€ DÃ©ploiement Terrains SynthÃ©tiques Dakar${NC}"
echo -e "${BLUE}Environnement: ${ENVIRONMENT}${NC}"
echo ""

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# VÃ©rifier les prÃ©requis
check_prerequisites() {
    log_info "VÃ©rification des prÃ©requis..."
    
    # VÃ©rifier Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js n'est pas installÃ©"
        exit 1
    fi
    
    # VÃ©rifier npm
    if ! command -v npm &> /dev/null; then
        log_error "npm n'est pas installÃ©"
        exit 1
    fi
    
    # VÃ©rifier PHP
    if ! command -v php &> /dev/null; then
        log_error "PHP n'est pas installÃ©"
        exit 1
    fi
    
    # VÃ©rifier Composer
    if ! command -v composer &> /dev/null; then
        log_error "Composer n'est pas installÃ©"
        exit 1
    fi
    
    log_success "Tous les prÃ©requis sont installÃ©s"
}

# Nettoyer le projet
clean_project() {
    log_info "Nettoyage du projet..."
    
    # Supprimer les dossiers de dÃ©veloppement
    rm -rf node_modules 2>/dev/null || true
    rm -rf Backend/vendor 2>/dev/null || true
    rm -rf Frontend/node_modules 2>/dev/null || true
    rm -rf Frontend/dist 2>/dev/null || true
    rm -rf Backend/storage/framework/cache/* 2>/dev/null || true
    rm -rf Backend/storage/framework/sessions/* 2>/dev/null || true
    rm -rf Backend/storage/framework/views/* 2>/dev/null || true
    
    log_success "Projet nettoyÃ©"
}

# Installer les dÃ©pendances Backend
install_backend_dependencies() {
    log_info "Installation des dÃ©pendances Backend..."
    
    cd Backend
    
    # Installer Composer
    composer install --no-dev --optimize-autoloader --no-interaction
    
    # Copier le fichier d'environnement
    if [ ! -f .env ]; then
        cp .env.example .env
        log_warning "Fichier .env crÃ©Ã© Ã  partir de .env.example"
    fi
    
    # GÃ©nÃ©rer la clÃ© d'application si nÃ©cessaire
    if ! grep -q "APP_KEY=base64:" .env; then
        php artisan key:generate
        log_success "ClÃ© d'application gÃ©nÃ©rÃ©e"
    fi
    
    cd ..
    log_success "DÃ©pendances Backend installÃ©es"
}

# Installer les dÃ©pendances Frontend
install_frontend_dependencies() {
    log_info "Installation des dÃ©pendances Frontend..."
    
    cd Frontend
    
    # Installer npm
    npm install --silent
    
    # Build pour la production
    npm run build
    
    cd ..
    log_success "DÃ©pendances Frontend installÃ©es et build terminÃ©"
}

# Configurer la base de donnÃ©es
setup_database() {
    log_info "Configuration de la base de donnÃ©es..."
    
    cd Backend
    
    # ExÃ©cuter les migrations
    php artisan migrate --force
    
    # ExÃ©cuter les seeders
    php artisan db:seed --force
    
    cd ..
    log_success "Base de donnÃ©es configurÃ©e"
}

# Optimiser pour la production
optimize_for_production() {
    log_info "Optimisation pour la production..."
    
    cd Backend
    
    # Cache des configurations
    php artisan config:cache
    
    # Cache des routes
    php artisan route:cache
    
    # Cache des vues
    php artisan view:cache
    
    cd ..
    log_success "Application optimisÃ©e pour la production"
}

# Configurer les permissions
set_permissions() {
    log_info "Configuration des permissions..."
    
    # Permissions pour Laravel
    chmod -R 755 Backend/storage
    chmod -R 755 Backend/bootstrap/cache
    
    # Permissions pour les logs
    chmod -R 755 Backend/storage/logs
    
    log_success "Permissions configurÃ©es"
}

# CrÃ©er les fichiers de configuration serveur
create_server_configs() {
    log_info "CrÃ©ation des configurations serveur..."
    
    # Configuration Nginx
    cat > nginx.conf << 'EOF'
server {
    listen 80;
    server_name votre-domaine.com www.votre-domaine.com;
    root /var/www/terrains-synthetiques/Backend/public;
    index index.php index.html;

    # Gestion des erreurs
    error_page 404 /index.php;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Cache statique
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # API routes
    location /api {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Frontend routes
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # PHP processing
    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
    }

    # SÃ©curitÃ©
    location ~ /\.ht {
        deny all;
    }

    location ~ /\.env {
        deny all;
    }
}
EOF

    # Configuration Apache (.htaccess)
    cat > Backend/public/.htaccess << 'EOF'
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
EOF

    log_success "Configurations serveur crÃ©Ã©es"
}

# CrÃ©er le script de sauvegarde
create_backup_script() {
    log_info "CrÃ©ation du script de sauvegarde..."
    
    cat > backup.sh << 'EOF'
#!/bin/bash

# Script de sauvegarde - Terrains SynthÃ©tiques Dakar
BACKUP_DIR="/var/backups/terrains-synthetiques"
DATE=$(date +%Y%m%d_%H%M%S)

# CrÃ©er le rÃ©pertoire de sauvegarde
mkdir -p $BACKUP_DIR

# Sauvegarde de la base de donnÃ©es
mysqldump -u root -p terrains_synthetiques > $BACKUP_DIR/db_backup_$DATE.sql

# Sauvegarde des fichiers
tar -czf $BACKUP_DIR/files_backup_$DATE.tar.gz /var/www/terrains-synthetiques

# Nettoyer les anciennes sauvegardes (garder 7 jours)
find $BACKUP_DIR -name "*.sql" -mtime +7 -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete

echo "Sauvegarde terminÃ©e: $DATE"
EOF

    chmod +x backup.sh
    log_success "Script de sauvegarde crÃ©Ã©"
}

# CrÃ©er le script de monitoring
create_monitoring_script() {
    log_info "CrÃ©ation du script de monitoring..."
    
    cat > monitor.sh << 'EOF'
#!/bin/bash

# Script de monitoring - Terrains SynthÃ©tiques Dakar

echo "=== MONITORING TERRAINS SYNTHÃ‰TIQUES ==="
echo "Date: $(date)"
echo ""

# VÃ©rifier les services
echo "=== SERVICES ==="
systemctl is-active nginx
systemctl is-active mysql
systemctl is-active php8.2-fpm

echo ""
echo "=== ESPACE DISQUE ==="
df -h

echo ""
echo "=== MÃ‰MOIRE ==="
free -h

echo ""
echo "=== LOGS RÃ‰CENTS ==="
tail -n 5 /var/log/nginx/error.log
EOF

    chmod +x monitor.sh
    log_success "Script de monitoring crÃ©Ã©"
}

# CrÃ©er le fichier README de dÃ©ploiement
create_deployment_readme() {
    log_info "CrÃ©ation du README de dÃ©ploiement..."
    
    cat > DEPLOYMENT_README.md << 'EOF'
# ðŸš€ Guide de DÃ©ploiement - Terrains SynthÃ©tiques Dakar

## Configuration Post-DÃ©ploiement

### 1. Variables d'Environnement
Ã‰diter le fichier `Backend/.env` :
```env
APP_NAME="Terrains SynthÃ©tiques Dakar"
APP_ENV=production
APP_DEBUG=false
APP_URL=https://votre-domaine.com

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=terrains_synthetiques
DB_USERNAME=your_db_user
DB_PASSWORD=your_db_password

MAPBOX_TOKEN=your_mapbox_token
```

### 2. Configuration Serveur
- Copier `nginx.conf` vers `/etc/nginx/sites-available/`
- Activer le site : `ln -s /etc/nginx/sites-available/terrains-synthetiques /etc/nginx/sites-enabled/`
- RedÃ©marrer Nginx : `systemctl restart nginx`

### 3. SSL/HTTPS
```bash
# Installer Certbot
apt install certbot python3-certbot-nginx

# Obtenir le certificat
certbot --nginx -d votre-domaine.com

# Renouvellement automatique
crontab -e
# Ajouter : 0 12 * * * /usr/bin/certbot renew --quiet
```

### 4. Sauvegardes
Le script `backup.sh` est configurÃ© pour :
- Sauvegarder la base de donnÃ©es quotidiennement
- Sauvegarder les fichiers
- Nettoyer les anciennes sauvegardes (7 jours)

### 5. Monitoring
Utiliser `monitor.sh` pour vÃ©rifier :
- Statut des services
- Utilisation des ressources
- Logs d'erreur

## Commandes Utiles

```bash
# RedÃ©marrer les services
systemctl restart nginx mysql php8.2-fpm

# Voir les logs
tail -f /var/log/nginx/access.log
tail -f /var/log/nginx/error.log
tail -f Backend/storage/logs/laravel.log

# Mise Ã  jour
cd /var/www/terrains-synthetiques
git pull
./deploy.sh production

# Sauvegarde manuelle
./backup.sh

# Monitoring
./monitor.sh
```

## Support
- Logs : `/var/log/nginx/` et `Backend/storage/logs/`
- Configuration : `Backend/.env` et `nginx.conf`
- Base de donnÃ©es : MySQL sur localhost:3306
EOF

    log_success "README de dÃ©ploiement crÃ©Ã©"
}

# Fonction principale
main() {
    echo -e "${BLUE}=== DÃ‰PLOIEMENT TERRAINS SYNTHÃ‰TIQUES DAKAR ===${NC}"
    echo ""
    
    # VÃ©rifier les prÃ©requis
    check_prerequisites
    
    # Nettoyer le projet
    clean_project
    
    # Installer les dÃ©pendances
    install_backend_dependencies
    install_frontend_dependencies
    
    # Configurer la base de donnÃ©es
    setup_database
    
    # Optimiser pour la production
    optimize_for_production
    
    # Configurer les permissions
    set_permissions
    
    # CrÃ©er les configurations
    create_server_configs
    create_backup_script
    create_monitoring_script
    create_deployment_readme
    
    echo ""
    echo -e "${GREEN}âœ… DÃ‰PLOIEMENT TERMINÃ‰ AVEC SUCCÃˆS !${NC}"
    echo ""
    echo -e "${BLUE}Prochaines Ã©tapes :${NC}"
    echo "1. Configurer le fichier Backend/.env"
    echo "2. Installer le certificat SSL"
    echo "3. Configurer les sauvegardes automatiques"
    echo "4. Tester toutes les fonctionnalitÃ©s"
    echo ""
    echo -e "${YELLOW}Fichiers crÃ©Ã©s :${NC}"
    echo "- nginx.conf (configuration serveur)"
    echo "- backup.sh (sauvegardes automatiques)"
    echo "- monitor.sh (monitoring)"
    echo "- DEPLOYMENT_README.md (guide complet)"
    echo ""
    echo -e "${GREEN}ðŸŽ‰ Votre application est prÃªte pour la production !${NC}"
}

# ExÃ©cuter le script
main "$@" 